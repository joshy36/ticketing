"use strict";exports.id=278,exports.ids=[278],exports.modules={60278:(e,t,n)=>{n.d(t,{q:()=>z});var i=n(87059),a=n(83166);let r=a.rN.create(),s=r.middleware,p=r.router,u=r.mergeRouters,o=s(async e=>{let t=(0,i.Z)(),{data:{session:n}}=await t.auth.getSession(),a=n?.user;return e.next({ctx:{user:a,supabase:t}})}),d=s(async e=>{let t=(0,i.Z)(),{data:{session:n}}=await t.auth.getSession(),r=n?.user;if(!r)throw new a.bR({code:"UNAUTHORIZED"});return e.next({ctx:{user:r,supabase:t}})}),l=r.procedure.use(o),y=r.procedure.use(d);var m=n(44185);let c=p({getEvents:l.query(async e=>{let t=e.ctx.supabase,{data:n}=await t.from("events").select("*, venues (name)");return n}),getEventById:l.input(m.z.object({id:m.z.string()})).query(async e=>{let t=e.ctx.supabase,{data:n}=await t.from("events").select().eq("id",e.input.id).limit(1).single();return n}),createEvent:y.input(m.z.object({name:m.z.string(),artist:m.z.string(),venue:m.z.string(),description:m.z.string(),ga_tickets:m.z.number(),ga_price:m.z.number(),rows:m.z.number().optional(),seats_per_row:m.z.number().optional(),date:m.z.string(),image:m.z.string().nullable()})).mutation(async e=>{let t=e.ctx.supabase,n=e.input.ga_tickets;e.input.rows&&e.input.rows>0&&e.input.seats_per_row&&e.input.seats_per_row>0&&(n+=e.input.rows*e.input.seats_per_row);let{data:i,error:a}=await t.from("events").insert({name:e.input.name,artist:e.input.artist,venue:e.input.venue,description:e.input.description,ga_tickets:e.input.ga_tickets,ga_price:e.input.ga_price,rows:e.input.rows,seats_per_row:e.input.seats_per_row,tickets_remaining:n,date:e.input.date,created_by:e.ctx.user?.id,image:e.input.image??null}).select().limit(1).single(),r=Array(e.input.ga_tickets).fill({event_id:i?.id,price:e.input.ga_price,seat:"GA"});if(e.input.rows&&e.input.seats_per_row)for(let t=1;t<=e.input.rows;t++)for(let n=0;n<e.input.seats_per_row;n++)r.push({event_id:i?.id,price:e.input.ga_price,seat:String(t)+"ABCDEFGHIJKLMNOPQRSTUVWXYZ"[n]});let{data:s,error:p}=await t.from("tickets").insert(r);return i}),updateEvent:l.input(m.z.object({id:m.z.string(),image:m.z.string()})).mutation(async e=>{let t=e.ctx.supabase,{data:n}=await t.from("events").update(e.input).eq("id",e.input.id).select().single();return n})}),g=p({getUserProfile:l.input(m.z.object({id:m.z.string()})).query(async e=>{let t=e.ctx.supabase,{data:n}=await t.from("user_profiles").select().eq("id",e.input.id).limit(1).single();return n}),updateUser:l.input(m.z.object({id:m.z.string(),username:m.z.string().nullable().optional(),first_name:m.z.string().nullable().optional(),last_name:m.z.string().nullable().optional(),bio:m.z.string().nullable().optional(),wallet_address:m.z.string().nullable().optional(),profile_image:m.z.string().nullable().optional()})).mutation(async e=>{let t=e.ctx.supabase,{data:n,error:i}=await t.from("user_profiles").update(e.input).eq("id",e.input.id).select().single();return n})});var b=n(79747),w=n(60570),f=n(36128);let T=JSON.parse('{"Mt":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"string","name":"setBaseUri","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ApprovalCallerNotOwnerNorApproved","type":"error"},{"inputs":[],"name":"ApprovalQueryForNonexistentToken","type":"error"},{"inputs":[],"name":"BalanceQueryForZeroAddress","type":"error"},{"inputs":[],"name":"MintERC2309QuantityExceedsLimit","type":"error"},{"inputs":[],"name":"MintToZeroAddress","type":"error"},{"inputs":[],"name":"MintZeroQuantity","type":"error"},{"inputs":[],"name":"OwnerQueryForNonexistentToken","type":"error"},{"inputs":[],"name":"OwnershipNotInitializedForExtraData","type":"error"},{"inputs":[],"name":"TransferCallerNotOwnerNorApproved","type":"error"},{"inputs":[],"name":"TransferFromIncorrectOwner","type":"error"},{"inputs":[],"name":"TransferToNonERC721ReceiverImplementer","type":"error"},{"inputs":[],"name":"TransferToZeroAddress","type":"error"},{"inputs":[],"name":"URIQueryForNonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"toTokenId","type":"uint256"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"ConsecutiveTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"quantity","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}]}'),_=p({getTicketById:l.input(m.z.object({id:m.z.string()})).query(async e=>{let t=e.ctx.supabase,{data:n}=await t.from("tickets").select("*, events (image, name)").eq("id",e.input.id);if(n?.length!==0)return n[0];throw new a.bR({code:"INTERNAL_SERVER_ERROR",message:"An unexpected error occurred, please try again later.",cause:"No ticket with inputted id"})}),getTicketsForUser:l.input(m.z.object({user_id:m.z.string()})).query(async e=>{let t=e.ctx.supabase,{data:n}=await t.from("tickets").select("*, events (id, image, name, etherscan_link)").eq("user_id",e.input.user_id);return n}),getTicketsForEvent:l.input(m.z.object({event_id:m.z.string()})).query(async e=>{let t=e.ctx.supabase,{data:n}=await t.from("tickets").select("*").eq("event_id",e.input.event_id).order("price",{ascending:!0});return n}),sellTicket:l.input(m.z.object({ticket_id:m.z.string(),event_id:m.z.string(),user_id:m.z.string()})).mutation(async e=>{let t=e.ctx.supabase,{data:n}=await t.from("events").select().eq("id",e.input.event_id).limit(1).single(),{data:i,error:r}=await t.from("tickets").select().eq("id",e.input.ticket_id).limit(1).single(),{data:s}=await t.from("user_profiles").select().eq("id",e.input.user_id).limit(1).single();if(r?.code=="PGRST116")throw new a.bR({code:"INTERNAL_SERVER_ERROR",message:"An unexpected error occurred, please try again later.",cause:r});let p=n?.etherscan_link?.split("/");if(!p)throw new a.bR({code:"INTERNAL_SERVER_ERROR",message:"An unexpected error occurred, please try again later.",cause:"No etherscan link"});let u=p[p.length-1],o=new b.r6(process.env.ALCHEMY_GOERLI_URL),d=new w.w(process.env.PRIVATE_KEY,o),l=new f.CH(u,T.Mt,d),y=await l.safeTransferFrom(d.address,s?.wallet_address,i?.token_id);await y.wait(),console.log(`Token transferred! Check it out at: https://goerli.basescan.org/tx/${y.hash}`);let{data:m,error:c}=await t.from("tickets").update({user_id:e.input.user_id}).eq("id",i?.id).select().single();return await t.rpc("increment",{table_name:"events",row_id:e.input.event_id,x:-1,field_name:"tickets_remaining"}),m})}),v=p({getArtists:l.query(async e=>{let t=e.ctx.supabase,{data:n}=await t.from("artists").select();return n}),getArtistById:l.input(m.z.object({id:m.z.string()})).query(async e=>{let t=e.ctx.supabase,{data:n}=await t.from("artists").select().eq("id",e.input.id).limit(1).single();return n}),createArtist:y.input(m.z.object({name:m.z.string(),description:m.z.string()})).mutation(async e=>{let t=e.ctx.supabase,{data:n}=await t.from("artists").insert({created_by:e.ctx.user?.id,name:e.input.name,description:e.input.description}).select().limit(1).single();return n}),updateArtist:y.input(m.z.object({id:m.z.string(),image:m.z.string()})).mutation(async e=>{let t=e.ctx.supabase,{data:n}=await t.from("artists").update(e.input).eq("id",e.input.id).select().single();return n})}),x=p({getVenues:l.query(async e=>{let t=e.ctx.supabase,{data:n}=await t.from("venues").select();return n}),getVenueById:l.input(m.z.object({id:m.z.string()})).query(async e=>{let t=e.ctx.supabase,{data:n}=await t.from("venues").select().eq("id",e.input.id).limit(1).single();return n}),createVenue:y.input(m.z.object({name:m.z.string(),description:m.z.string()})).mutation(async e=>{let t=e.ctx.supabase,{data:n}=await t.from("venues").insert({created_by:e.ctx.user?.id,name:e.input.name,description:e.input.description}).select().limit(1).single();return n}),updateVenue:y.input(m.z.object({id:m.z.string(),image:m.z.string()})).mutation(async e=>{let t=e.ctx.supabase,{data:n}=await t.from("venues").update(e.input).eq("id",e.input.id).select().single();return n})}),z=u(c,g,_,v,x)}};